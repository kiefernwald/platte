#!/usr/bin/env ruby

require 'thor'
require 'fileutils'
require 'colorize'
require './lib/combinator'

# Platte command line tool
class Platte < Thor
  desc 'combine FILE MAIN [MODULE [MODULE ...]]', 'combine FILE from MAIN and MODULES.'
  def combine(file, main, *modules)
    puts "Loading selected modules...".green
    main_module, platte_modules = get_modules main, modules
    output_module_info(file, main_module, platte_modules)
    write_to_file file, Combinator.new.combine(main_module, platte_modules)
    puts "Copy assets...".green
    copy_assets File.dirname(file), main_module, platte_modules
    puts "Done.".green
    puts "🏢"
  end

  private

  def output_module_info(file, main_module, platte_modules)
    puts "#{'🏗  Constructing'.green} #{file.yellow} #{'from the following modules:'.green}"
    puts "  * #{main_module.name} (main module) – #{main_module.description}".blue
    platte_modules.each {|mod| puts "  * #{mod.name} – #{mod.description}".blue}
  end

  def get_modules(main, modules)
    main_module = PlatteModule.new "modules/%s.main" % main
    platte_modules = modules.map { |mod| PlatteModule.new "modules/%s.module" % mod }

    [main_module, platte_modules]
  end

  def write_to_file(file, contents)
    file = File.new(file, "w")
    file.write(contents)
    file.close
  end

  def copy_assets(destination, main, modules)
    FileUtils.copy_entry "#{main.directory}/assets", "#{destination}/assets"
    modules.each { |mod| FileUtils.copy_entry "#{mod.directory}/assets", "#{destination}/assets" } if modules
  end
end

Platte.start
